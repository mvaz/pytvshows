#!/usr/bin/env python
# encoding: utf-8
"""
PyTVShows - Downloads torrents from tvrss.net based on 
http://tvshows.sourceforge.net/

Copyright (C) 2007, Ben Firshman

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__version__ = '0.2+svn'

import pytvshows
import pytvshows.logger as logging

import ConfigParser
import getopt
import os
import sys

warn = sys.stderr

help_message = '''pytvshows %s
Usage: pytvshows [options]

pytvshows downloads torrents for TV shows from RSS feeds provided by
tvRSS.net. It is based on http://tvshows.sourceforge.net/.

Options: 
  -cFILE, --config FILE
                  Path to config file. Default: ~/.pytvshows.cfg
  -fFEED, --feed=FEED
                    Override the tvrss.net feed. %%s is replaced with the 
                    exact show name.
  -h, --help        This help message
  -oDIR, --output_dir=DIR  
                    Directory to save torrents. Default: ~/
  -ODIR, --output_dir2=DIR
                    Directory to save torrents if output_dir doesn't exist.
                    Handy for rtorrent if you move the directory to disable
                    downloads.
  -QQUAL, --quality=QUAL
                    The TV show quality required. 'normal', 'high' or 
                    'veryhigh', where 'high' is high resolution and 'veryhigh'
                    is 720p. Default: normal
  -lLOGFILE, --log  LOGFILE
                    Location to save log file
  -v, --verbose     Print verbose output
  -q, --quiet       Print only error messages
''' % __version__

commands = ['subscribe', 'unsubscribe', 'run']
config_file = os.path.expanduser("~/.pytvshows.cfg")

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    # verbosity is incremented every -v flag, decremented every -q flag
    verbosity = 0 
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], 
                "c:f:ho:O:Q:vql:", 
                ["config=", "feed=", "help", "output_dir=", "output_dir2=", 
                    "quality=", "verbose", "quiet", "log="])
        except getopt.error, msg:
            raise Usage(msg)
    
        # option processing
        for option, value in opts:
            if option in ("-c", "--config"):
                global config_file
                config_file = os.path.expanduser(value)
            if option in ("-f", "--feed"):
                try:
                    value % ''
                except TypeError:
                    raise Usage("Specified feed does not include %s")
                pytvshows.config['feed'] = value
            if option in ("-h", "--help"):
                print help_message
                return
            if option in ("-o", "--output_dir"):
                pytvshows.config['output_dir'] = os.path.expanduser(value)
            if option in ("-O", "--output_dir2"):
                pytvshows.config['output_dir2'] = os.path.expanduser(value)
            if option in ("-Q", "--quality"):
                if value == "normal":
                    pytvshows.config['quality'] = 1
                elif value == "high":
                    pytvshows.config['quality'] = 2
                elif value == "veryhigh":
                    pytvshows.config['quality'] = 3
                else:
                    raise Usage("Invalid quality")
            if option in ("-v", "--verbose"):
                pytvshows.console.decreaseLevel()
            if option in ("-q", "--quiet"):
                pytvshows.console.increaseLevel()
            if option in ("-l", "--log"):
                logfile = os.path.expanduser(value)
                logtofile = logging.FileHandler(logfile)
                logtofile.setLevel(logging.INFO)
                format_str = '%(asctime)s %(levelname)s (%(lineno)d) ' \
                    '%(message)s'
                formatter = logging.Formatter(format_str)
                logtofile.setFormatter(formatter)
                logging.getLogger('').addHandler(logtofile)
        #if args:
        #    if command not in commands:
        #        raise Usage("Invalid command.")
        #    command = args[0]
        #else:
        #    raise Usage("No command specified.")
    except Usage, err:
        print >> warn, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
        print >> warn, "\t for help use --help"
        return 2

    logging.info("pytvshows %s" % __version__)
    logging.debug("Loading configuration file...")
    f = ConfigParser.ConfigParser()
    f.read(config_file)
    for exact_name in f.sections():
        l = f.options(exact_name)
        args = {
            'human_name': None,
            'show_type': None,
            'season': None,
            'episode': None,
            'date': None,
            'time': None, 
            'ignoremissingdetails': False,
        }
        for key in args.keys():
            if f.has_option(exact_name, key):
                args[key] = f.get(exact_name, key)
        logging.info("Getting episodes for %s..." % exact_name)
        show = pytvshows.Show(exact_name, args)
        show.get_new_episodes()
        for (key, value) in args.items():
            if getattr(show, key) != value:
                f.set(exact_name, key, getattr(show, key))
    logging.debug("Saving configuration file...")
    fp = open(config_file+'-temp', "w+")
    f.write(fp)
    fp.close()
    if sys.platform[:3] == 'win' or sys.platform[-3:] == 'win':
        os.remove(config_file)
    os.rename(config_file+'-temp', config_file)

if __name__ == "__main__":
    sys.exit(main())
